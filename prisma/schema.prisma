// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email")
  password  String   @map("password")
  userType  String   @default("STUDENT") @map("userType")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Posts    Posts[] // 사용자(Users) 테이블과 게시글(Posts) 테이블이 1:N 관계를 맺습니다.
  Comments Comments[] // 사용자(Users) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.
  Answers  Answers[] // 사용자(Users) 테이블과 답변(Answers) 테이블이 1:N 관계를 맺습니다.

  @@map("Users")
}

model Posts {
  postId    Int      @id @default(autoincrement()) @map("postId")
  UserId    Int      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  title     String   @map("title")
  content   String   @map("content") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  User            Users             @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Comments        Comments[] // 게시글(Posts) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.
  PostTagsMapping PostTagsMapping[] // 게시글(Posts) 테이블과 PostTagsMapping 테이블이 1:N 관계를 맺습니다.
  Answers         Answers[]

  @@map("Posts")
}

model Answers {
  answerId  Int      @id @default(autoincrement()) @map("answerId")
  UserId    Int      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  content   String   @map("content") @db.Text
  chosen    Boolean  @default(false) @map("chosen")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  // Posts 테이블과 관계를 설정합니다.
  Post Posts @relation(fields: [answerId], references: [postId], onDelete: Cascade)

  @@map("Answers")
}

model Comments {
  commentId Int      @id @default(autoincrement()) @map("commentId")
  PostId    Int      @map("PostId") // 게시글(Posts) 테이블을 참조하는 외래키
  UserId    Int      @map("UserId") // 사용자(Users) 테이블을 참조하는 외래키
  content   String   @map("content") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Posts 테이블과 관계를 설정합니다.
  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  // Users 테이블과 관계를 설정합니다.
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Comments")
}

model PostTagsMapping {
  mappingId Int @id @default(autoincrement()) @map("mappingId")
  PostId    Int @map("PostId") // 게시글(Posts) 테이블을 참조하는 외래키
  TagId     Int @map("TagId") // 태그(Tags) 테이블을 참조하는 외래키

  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  Tag  Tags  @relation(fields: [TagId], references: [tagId], onDelete: Cascade)

  @@map("Post_tags_mapping")
}

model Tags {
  tagId   Int    @id @default(autoincrement()) @map("tagId")
  content String @map("content")

  PostTagsMapping PostTagsMapping[] // 태그(Tags)테이블과 PostTagsMapping 테이블이 1:N 관계를 맺습니다.

  @@map("Tags")
}

// model Like {
//   likeId Int    @id @default(autoincrement()) @map("tagId")
//   type   String @map("Type")
//   UserId Int    @map("UserId")
//   PostId Int    @map("PostId")

//   @@map("Like")
// }
